---
AWSTemplateFormatVersion: '2010-09-09'
Description: Lambda Function for Cost Optimization scripts
Parameters:
  MemorySize:
    Type: String
    AllowedValues:
    - 256
    - 512
    - 1024
    - 2048
  Timeout:
    Type: String
    AllowedValues:
    - 300
    - 500
    - 700
    - 900
Resources:
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action: sts:AssumeRole
      Policies:
      - PolicyName: costOptimizationRole
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - ec2:*
            - s3:*
            - kms:*
            Resource: "*"
  costOptimizationLambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: costOptimizationFunction
      Handler: index.lambda_handler
      Role:
        Fn::GetAtt:
        - LambdaRole
        - Arn
      Code:
        ZipFile: |
          from urllib import response
          import boto3
          import pandas as pd
          from datetime import date

          client = boto3.client('ec2')
          s3 = boto3.resource('s3')

          date_today = date.today()
          date_today = date_today.strftime("%Y,%m,%d")
          date_today = date(int(date_today.split(',')[0]),int(date_today.split(',')[1]),int(date_today.split(',')[2]))

          data={'Snapshot IDs(unassociated with AMI)':[]}

          snapshot_response = client.describe_snapshots(OwnerIds=['self'])
          snapshot_unassociated = []

          def lambda_handler(event, context):
              for i in snapshot_response['Snapshots']:
                  temp = ''
                  temp = str(i['Description'])
                  if(temp.find('ami-')==-1):
                      snapshot_unassociated.append(i['SnapshotId'])
                  
              data['Snapshot IDs(unassociated with AMI)'] = snapshot_unassociated
              df=pd.DataFrame.from_dict(data)
              filename = 'UnassociatedSnapshots' + str(date_today) + '.csv'
              foldername = '/tmp/' + filename
              df.to_csv(foldername,index=None)
              filename = 'Automation-Reports/'+filename
              result = s3.meta.client.put_object(Body=open(foldername, 'rb'), Bucket='automation-team-pranad-ayush-jayant-s3-backend', Key=filename)
              res = result.get('ResponseMetadata')
              if res.get('HTTPStatusCode') == 200:
                  print('File Uploaded Successfully')
              else:
                  print('File Not Uploaded')
      Runtime: python3.8
      PackageType: Zip
      Layers:
      - arn:aws:lambda:ap-south-1:770693421928:layer:Klayers-p38-pandas:16
      Timeout:
        Ref: Timeout
      MemorySize:
        Ref: MemorySize
      TracingConfig:
        Mode: Active
    DependsOn: LambdaRole
  costOptimizationLambdaFunctionScheduledRule:
    Type: AWS::Events::Rule
    Properties:
      ScheduleExpression: rate(2 minutes)
      State: ENABLED
      Targets:
      - Arn:
          Fn::GetAtt:
          - costOptimizationLambdaFunction
          - Arn
        Id: TargetFunctionV1
    DependsOn: costOptimizationLambdaFunction
  PermissionForEventsToInvokecostOptimizationLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName:
        Ref: costOptimizationLambdaFunction
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
      SourceArn:
        Fn::GetAtt:
        - costOptimizationLambdaFunctionScheduledRule
        - Arn
